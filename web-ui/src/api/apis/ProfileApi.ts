/* tslint:disable */
/* eslint-disable */
/**
 * JobCounselor API
 * Minimal API surface for the JobCounselor backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ProfilesIdPutRequest,
  ApiV1ProfilesPostRequest,
  Profile,
} from '../models/index';
import {
    ApiV1ProfilesIdPutRequestFromJSON,
    ApiV1ProfilesIdPutRequestToJSON,
    ApiV1ProfilesPostRequestFromJSON,
    ApiV1ProfilesPostRequestToJSON,
    ProfileFromJSON,
    ProfileToJSON,
} from '../models/index';

export interface ApiV1ProfilesIdPutOperationRequest {
    id: string;
    apiV1ProfilesIdPutRequest: ApiV1ProfilesIdPutRequest;
}

export interface ApiV1ProfilesPostOperationRequest {
    apiV1ProfilesPostRequest: ApiV1ProfilesPostRequest;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Get all profiles
     */
    async apiV1ProfilesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get all profiles
     */
    async apiV1ProfilesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiV1ProfilesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a profile
     */
    async apiV1ProfilesIdPutRaw(requestParameters: ApiV1ProfilesIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1ProfilesIdPut().'
            );
        }

        if (requestParameters['apiV1ProfilesIdPutRequest'] == null) {
            throw new runtime.RequiredError(
                'apiV1ProfilesIdPutRequest',
                'Required parameter "apiV1ProfilesIdPutRequest" was null or undefined when calling apiV1ProfilesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ProfilesIdPutRequestToJSON(requestParameters['apiV1ProfilesIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Update a profile
     */
    async apiV1ProfilesIdPut(requestParameters: ApiV1ProfilesIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.apiV1ProfilesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a profile
     */
    async apiV1ProfilesPostRaw(requestParameters: ApiV1ProfilesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['apiV1ProfilesPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiV1ProfilesPostRequest',
                'Required parameter "apiV1ProfilesPostRequest" was null or undefined when calling apiV1ProfilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ProfilesPostRequestToJSON(requestParameters['apiV1ProfilesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Create a profile
     */
    async apiV1ProfilesPost(requestParameters: ApiV1ProfilesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.apiV1ProfilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
